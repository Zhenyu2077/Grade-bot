//CIS554 HW1
//Due: 11:59PM, Wednesday ( September 9)
//Do not modify main funaiton.
//Do not introduce new functions.
//In-place implementation is required.  Exteranl stuctures are not allowed.
//For example, you are not allowed to copy linked list values to outside, and then process the data and copy them
//back to linked list.

#include <iostream>
#include "HW1.h"
using namespace std;

int Node::elementNum = 0;
int Node::elementCreated = 0;
int Node::elementDeleted = 0;
std::unordered_map<void*, int> Node::db;

void DoublyLinkedList::makeRandomList(int m, int n) {

	for (int i = 0; i < m; i++) {
		Node* p1 = new Node(rand() % n);
		p1->previous = tail;
		if (tail) tail->next = p1;
		tail = p1;
		if (!head) head = p1;
	}
}

void DoublyLinkedList::printForward() {
	cout << endl;
	Node* p1 = head;
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->next;
	}
}

void DoublyLinkedList::printBackward() {
	cout << endl;
	Node* p1 = tail;
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->previous;
	}
}

bool DoublyLinkedList::isSorted(const DoublyLinkedList& d) {
	bool cmpF = compareForward(d);
	bool cmpB = compareBackward(d);
	return cmpF && cmpB;
}


DoublyLinkedList::DoublyLinkedList(const std::initializer_list<int>& V) {
	head = tail = nullptr;
	for (auto& value : V) {
		Node* p1 = new Node(value);
		p1->previous = tail;
		if (tail != nullptr)
			tail->next = p1;
		tail = p1;
		if (head == nullptr)
			head = p1;
	}
}

bool DoublyLinkedList::compareForward(const DoublyLinkedList& d)
{
	Node* pc = d.head;
	Node* p = head;
	while (pc != nullptr) {
		if (p == nullptr) return false;
		if (pc->value != p->value) return false;
		pc = pc->next;
		p = p->next;
	}
	return true;
}

bool DoublyLinkedList::compareBackward(const DoublyLinkedList& d)
{
	Node* pc = d.tail;
	Node* p = tail;
	while (pc != nullptr) {
		if (p == nullptr) return false;
		if (pc->value != p->value) return false;
		pc = pc->previous;
		p = p->previous;
	}
	return true;
}

void DoublyLinkedList::correct_group() {
	if (!head || !head->next || !head->next->next) return;
	Node* p1, * p2;
	p1 = head;

	while (p1->next) {
		p2 = p1->next;
		if (p1->value == p2->value) {
			p1 = p1->next;
			continue;
		}
		p2 = p2->next;
		while (p2) {
			if (p2->value == p1->value) {
				Node* p3 = p2->next;
				if (p2 == tail) tail = p2->previous;
				else p2->next->previous = p2->previous;
				p2->previous->next = p2->next;

				p2->next = p1->next;
				p1->next = p2;
				p2->previous = p1;
				p2->next->previous = p2;
				p1 = p2;
				p2 = p3;
			}
			else {
				p2 = p2->next;
			}
		}
		p1 = p1->next;
	}
}

//////////////////////////////////////////////////////////////
// Paste students' solution below


